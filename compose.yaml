services:
  puzzle_lab_web:
    image: puzzle_lab_web
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./src/PuzzleLab.Web/Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      puzzle_lab_api:
        condition: service_healthy

  puzzle_lab_api:
    image: puzzle_lab_api
    restart: unless-stopped
    depends_on:
      database:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./src/PuzzleLab.API/Dockerfile
    ports:
      - "3000:3000"
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s

  background_worker:
    image: puzzle_lab_bg_worker
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    build:
      context: .
      dockerfile: ./src/PuzzleLab.BackgroundWorker/Dockerfile

  database:
    image: postgres:latest
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: puzzle_lab
    ports:
      - "5432:5432"
    volumes:
      - puzzle_lab_data:/var/lib/postgresql/data

  rabbitmq:
    image: rabbitmq:3-management
    restart: unless-stopped
    hostname: rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: puzzle_lab
      RABBITMQ_DEFAULT_PASS: puzzle_lab
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s

volumes:
  puzzle_lab_data:
  rabbitmq_data: