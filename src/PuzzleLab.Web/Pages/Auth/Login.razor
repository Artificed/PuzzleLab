@page "/login"
@using PuzzleLab.Shared.DTOs.Auth.Requests
@using PuzzleLab.Web.Services.Api.Core.Interfaces
@using PuzzleLab.Web.Services.Api.Security
@using PuzzleLab.Web.Services.Ui
@using PuzzleLab.Web.Services.State

@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer
@inject ITokenProvider TokenProvider
@inject UserStateService UserState
<PageTitle>Login</PageTitle>

<div class="w-full max-w-md mx-auto mt-10">
    <div class="border border-gray-300 rounded-xl p-12 space-y-8">
        <div class="space-y-2 text-center">
            <h1 class="text-3xl font-bold">PuzzleLab</h1>
        </div>

        <EditForm Model="_loginModel" OnValidSubmit="HandleLoginAsync" FormName="loginForm" class="space-y-4">
            <DataAnnotationsValidator/>

            <div class="space-y-2">
                <label for="email"
                       class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Email
                </label>
                <InputText @bind-Value="_loginModel.Email"
                           type="email"
                           id="email"
                           placeholder="john.doe@gmail.com"
                           class="flex h-10 w-full rounded-md border border-gray-200 bg-white mt-1 px-3 py-2 text-sm placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"/>
                <ValidationMessage For="@(() => _loginModel.Email)" class="text-red-600 text-xs"/>
            </div>

            <div class="space-y-2">
                <label for="password"
                       class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Password
                </label>
                <InputText @bind-Value="_loginModel.Password"
                           type="password"
                           id="password"
                           placeholder="••••••••"
                           class="flex h-10 w-full rounded-md border border-gray-200 bg-white mt-1 px-3 py-2 text-sm ring-offset-white placeholder:text-gray-500 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:cursor-not-allowed disabled:opacity-50"/>
                <ValidationMessage For="@(() => _loginModel.Password)" class="text-red-600 text-xs"/>
            </div>

            <div class="flex items-center space-x-2">
                <InputCheckbox @bind-Value="_rememberMe"
                               id="remember"
                               class="h-4 w-4 rounded border-gray-300 text-gray-900 focus:ring-gray-950"/>
                <label for="remember"
                       class="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70">
                    Remember me
                </label>
            </div>

            <button type="submit"
                    disabled="@_isLoading"
                    class="cursor-pointer inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-gray-900 text-gray-50 hover:bg-gray-900/90 h-10 px-4 py-2 w-full">
                @if (_isLoading)
                {
                    <span>Signing in...</span>
                }
                else
                {
                    <span>Sign in</span>
                }
            </button>
        </EditForm>

        <div class="text-center text-sm text-gray-500">
            Don't have an account? <a href="/register" class="underline font-medium">Sign up</a>
        </div>
    </div>
</div>

@code {
    private readonly LoginRequest _loginModel = new LoginRequest();
    private bool _isLoading = false;
    private bool _rememberMe = false; // TODO: Implement this

    private async Task HandleLoginAsync()
    {
        _isLoading = true;

        try
        {
            var loginResponse = await AuthService.LoginAsync(_loginModel);

            if (loginResponse?.Token is not null)
            {
                await TokenProvider.SetTokenAsync(loginResponse.Token);
                ToastService.ShowSuccess("Login successful!", "Welcome");
                await UserState.UpdateUserAfterLoginAsync();
                if (UserState?.CurrentUser?.Role == "Admin")
                {
                    NavigationManager.NavigateTo("/admin/dashboard", forceLoad: false);
                }
                else if (UserState?.CurrentUser?.Role == "User")
                {
                    NavigationManager.NavigateTo("/user/dashboard", forceLoad: false);
                }
                else
                {
                    ToastService.ShowError("Invalid user role!", "Login Error");
                }
            }
            else
            {
                Console.WriteLine("Login failed (LoginResponse or Token was null).");
                _isLoading = false;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine($"Login exception: {e.Message}");
            ToastService.ShowError($"An unexpected error occurred during login: {e.Message}", "Login Error");
            _isLoading = false;
        }
    }

}