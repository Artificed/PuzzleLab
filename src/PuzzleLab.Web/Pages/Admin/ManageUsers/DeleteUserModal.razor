@using PuzzleLab.Web.Models
@if (IsVisible && UserToDelete != null)
{
    <div class="fixed w-full inset-0 bg-black/80 flex items-center justify-center z-50" @onclick="HandleBackdropClick">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md" @onclick:stopPropagation="true">
            <h2 class="text-xl font-bold mb-4">Delete User</h2>
            <p class="mb-6">Are you sure you want to delete the user <span
                    class="font-bold">@UserToDelete.Username</span>? This action cannot be undone.</p>

            <div class="flex justify-end space-x-2">
                <button type="button" @onclick="Cancel"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                    Cancel
                </button>
                <button type="button" @onclick="ConfirmDelete" disabled="@IsSubmitting"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-red-600 text-white hover:bg-red-700 h-10 px-4 py-2">
                    @if (IsSubmitting)
                    {
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>Delete User</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public bool IsSubmitting { get; set; }
    [Parameter] public User? UserToDelete { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnConfirm { get; set; }

    private async Task ConfirmDelete() => await OnConfirm.InvokeAsync();
    private async Task Cancel() => await OnClose.InvokeAsync();
    private async Task HandleBackdropClick() => await OnClose.InvokeAsync();
}
