@page "/admin/users"

@layout Components.Layout.AdminLayout

@using PuzzleLab.Web.Services.State
@using PuzzleLab.Web.Components.Navbars
@using System.Collections.Generic
@using PuzzleLab.Shared.DTOs.User
@using PuzzleLab.Shared.DTOs.User.Requests
@using PuzzleLab.Web.Models
@using PuzzleLab.Web.Services.Api.Interfaces

@inject NavigationManager NavigationManager
@inject IUserService UserService
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Manage Users - PuzzleLab</PageTitle>

<div class="space-y-6">
    <div class="flex flex-col sm:flex-row items-center justify-between gap-4 mb-4">
        <h1 class="text-2xl font-bold">Manage Users</h1>
        <div class="flex flex-col sm:flex-row items-center gap-4 w-full sm:w-auto">
            <div class="relative w-full sm:w-auto">
                <input type="text"
                       @bind-value="_searchTerm"
                       @bind-value:event="oninput"
                       @onkeyup="SearchUsers"
                       placeholder="Search users..."
                       class="h-10 w-full sm:w-64 rounded-md border border-gray-200 px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
            </div>
            <button @onclick="ShowAddUserModal"
                    class="w-full sm:w-auto inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-gray-900 text-gray-50 hover:bg-gray-900/90 h-10 px-4 py-2">
                Add User
            </button>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="flex justify-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
        </div>
    }
    else if (_users.Count == 0)
    {
        <div class="text-center p-8 border border-gray-200 rounded-lg bg-white shadow-sm">
            <p class="text-gray-500">No users have been added yet.</p>
            <button @onclick="ShowAddUserModal"
                    class="mt-4 inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-gray-900 text-gray-50 hover:bg-gray-900/90 h-10 px-4 py-2">
                Add First User
            </button>
        </div>
    }
    else if (_filteredUsers.Count == 0)
    {
        <div class="text-center p-8 border border-gray-200 rounded-lg bg-white shadow-sm">
            <p class="text-gray-500">No users found matching your search criteria.</p>
        </div>
    }
    else
    {
        <div class="border border-gray-200 rounded-lg overflow-hidden bg-white shadow-sm">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                    <tr>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Username
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Created At
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last
                            Login
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Actions
                        </th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var user in _filteredUsers.Skip((_currentPage - 1) * _pageSize).Take(_pageSize))
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@user.Username</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@user.Email</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@(user.LastLoginAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex space-x-4">
                                    <button @onclick="() => ShowEditUserModal(user)"
                                            class="text-blue-600 hover:text-blue-900 hover:underline">Edit
                                    </button>
                                    <button @onclick="() => ShowDeleteConfirmation(user)"
                                            class="text-red-600 hover:text-red-900 hover:underline">Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>

        @if (_totalPages > 1)
        {
            <div class="flex flex-col sm:flex-row justify-between items-center mt-4 gap-4">
                <div class="text-sm text-gray-500">
                    Showing @(((_currentPage - 1) * _pageSize) + 1)
                    to @(Math.Min(_currentPage * _pageSize, _filteredUsers.Count))
                    of @_filteredUsers.Count users
                </div>
                <div class="flex space-x-2">
                    <button @onclick="PreviousPage"
                            disabled="@(_currentPage <= 1)"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                        Previous
                    </button>
                    <span class="inline-flex items-center justify-center h-10 px-4 py-2 text-sm text-gray-700">
                        Page @_currentPage of @_totalPages
                    </span>
                    <button @onclick="NextPage"
                            disabled="@(_currentPage >= _totalPages)"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                        Next
                    </button>
                </div>
            </div>
        }
    }
</div>

<AddUserModal IsVisible="_showAddUserModal"
              IsSubmitting="_isSubmitting"
              UserModel="_newUser"
              OnClose="CloseAddUserModal"
              OnSubmit="HandleAddUser"/>

<EditUserModal IsVisible="_showEditUserModal"
               IsSubmitting="_isSubmitting"
               UserModel="_editUser"
               OnClose="CloseEditUserModal"
               OnSubmit="HandleEditUser"/>

<DeleteUserModal IsVisible="_showDeleteConfirmation"
                 IsSubmitting="_isSubmitting"
                 UserToDelete="_selectedUser"
                 OnClose="CloseDeleteConfirmation"
                 OnConfirm="HandleDeleteUser"/>

@code {
    private List<User> _users = new();
    private List<User> _filteredUsers = new();
    private bool _isLoading = true;
    private bool _isSubmitting = false;
    private string _searchTerm = "";
    private string _selectedRole = "";
    private int _pageSize = 10;
    private int _currentPage = 1;
    private int _totalPages => (_filteredUsers.Count == 0) ? 1 : ((_filteredUsers.Count + _pageSize - 1) / _pageSize);

    private bool _showAddUserModal = false;
    private CreateUserRequest _newUser = new();
    private bool _showEditUserModal = false;
    private EditUserRequest _editUser = new();
    private bool _showDeleteConfirmation = false;
    private User _selectedUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            var response = await UserService.GetAllUsersAsync();
            if (response is null)
            {
                return;
            }

            _users = response.userDtos.Select(dto => new User
            {
                Id = dto.Id.ToString(),
                Username = dto.Username,
                Email = dto.Email,
                CreatedAt = dto.CreatedAt,
                LastLoginAt = dto.LastLoginAt
            }).ToList();

            FilterUsers();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
            await InvokeAsync(StateHasChanged); // Update UI after loading
        }
    }

    // --- Filtering & Pagination ---
    private void FilterUsers()
    {
        IEnumerable<User> query = _users;

        if (!string.IsNullOrEmpty(_searchTerm))
        {
            query = query.Where(u => u.Username.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                                     u.Email.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase));
        }

        _filteredUsers = query.ToList();
        _currentPage = 1; // Reset page when filter changes
    }

    private void SearchUsers() // Called by @onkeyup or similar event
    {
        FilterUsers();
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
        }
    }

    // --- Modal Visibility Control ---
    private void ShowAddUserModal()
    {
        _newUser = new CreateUserRequest();
        _showAddUserModal = true;
    }

    private void CloseAddUserModal() => _showAddUserModal = false;

    private void ShowEditUserModal(User user)
    {
        _editUser = new EditUserRequest()
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email,
            Password = "",
        };
        _showEditUserModal = true;
    }

    private void CloseEditUserModal() => _showEditUserModal = false;

    private void ShowDeleteConfirmation(User user)
    {
        _selectedUser = user;
        _showDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmation() => _showDeleteConfirmation = false;

    // --- Modal Action Handlers ---
    private async Task HandleAddUser(CreateUserRequest model)
    {
        _isSubmitting = true;
        try
        {
            Console.WriteLine($"Attempting to add user: {model.Username}"); // Logging
            // TODO: API call to create user using 'model'
            // await ApiClient.CreateUserAsync(model);

            // Mock: Add to local list
            var newUser = new User
            {
                Id = Guid.NewGuid().ToString(), Username = model.Username, Email = model.Email, CreatedAt = DateTime.Now
            };
            _users.Add(newUser); // Add to the master list

            await LoadUsersAsync(); // Reloading might be simpler if API doesn't return the full list
            // OR FilterUsers(); // Just re-apply filters if only adding locally

            CloseAddUserModal();
            // TODO: Show success notification
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error creating user: {ex.Message}");
            // TODO: Show error notification
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task HandleEditUser(EditUserRequest model)
    {
        _isSubmitting = true;
        try
        {
            Console.WriteLine($"Attempting to edit user: {model.Username}"); // Logging
            // TODO: API call to update user using 'model'
            // await ApiClient.UpdateUserAsync(model.Id, model);

            // Mock: Update in local list
            var userToUpdate = _users.FirstOrDefault(u => u.Id == model.Id);
            if (userToUpdate != null)
            {
                userToUpdate.Username = model.Username;
                userToUpdate.Email = model.Email;
            }

            await LoadUsersAsync(); // Reloading might be simpler
            // OR FilterUsers(); // Just re-apply filters if only updating locally

            CloseEditUserModal();
            // TODO: Show success notification
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error updating user: {ex.Message}");
            // TODO: Show error notification
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    private async Task HandleDeleteUser() // Uses _selectedUser from state
    {
        _isSubmitting = true;
        try
        {
            Console.WriteLine($"Attempting to delete user: {_selectedUser?.Username}"); // Logging
            if (_selectedUser == null) return; // Safety check

            // TODO: API call to delete user using '_selectedUser.Id'
            // await ApiClient.DeleteUserAsync(_selectedUser.Id);

            // Mock: Remove from local list
            _users.RemoveAll(u => u.Id == _selectedUser.Id);

            await LoadUsersAsync(); // Reloading might be simpler
            // OR FilterUsers(); // Just re-apply filters if only removing locally

            CloseDeleteConfirmation();
            // TODO: Show success notification
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
            // TODO: Show error notification
        }
        finally
        {
            _isSubmitting = false;
            _selectedUser = new();
        }
    }

}