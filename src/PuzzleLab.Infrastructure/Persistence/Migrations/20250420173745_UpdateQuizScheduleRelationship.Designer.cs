// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PuzzleLab.Infrastructure.Persistence;

#nullable disable

namespace PuzzleLab.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20250420173745_UpdateQuizScheduleRelationship")]
    partial class UpdateQuizScheduleRelationship
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Answer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_answers_question_id");

                    b.ToTable("answers", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea")
                        .HasColumnName("image_data");

                    b.Property<string>("ImageMimeType")
                        .HasColumnType("text")
                        .HasColumnName("image_mime_type");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuestionPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_package_id");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.HasKey("Id")
                        .HasName("pk_questions");

                    b.HasIndex("QuestionPackageId")
                        .HasDatabaseName("ix_questions_question_package_id");

                    b.ToTable("questions", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuestionPackage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_question_packages");

                    b.ToTable("question_packages", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Quiz", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuestionPackageId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_package_id");

                    b.Property<Guid>("ScheduleId")
                        .HasColumnType("uuid")
                        .HasColumnName("schedule_id");

                    b.HasKey("Id")
                        .HasName("pk_quizzes");

                    b.HasIndex("QuestionPackageId")
                        .HasDatabaseName("ix_quizzes_question_package_id");

                    b.HasIndex("ScheduleId")
                        .IsUnique()
                        .HasDatabaseName("ix_quizzes_schedule_id");

                    b.ToTable("quizzes", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsCorrect")
                        .HasColumnType("boolean")
                        .HasColumnName("is_correct");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid")
                        .HasColumnName("question_id");

                    b.Property<Guid>("QuizSessionId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_session_id");

                    b.Property<Guid>("SelectedAnswerId")
                        .HasColumnType("uuid")
                        .HasColumnName("selected_answer_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_answers");

                    b.HasIndex("QuestionId")
                        .HasDatabaseName("ix_quiz_answers_question_id");

                    b.HasIndex("QuizSessionId")
                        .HasDatabaseName("ix_quiz_answers_quiz_session_id");

                    b.HasIndex("SelectedAnswerId")
                        .HasDatabaseName("ix_quiz_answers_selected_answer_id");

                    b.ToTable("quiz_answers", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizSession", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("CorrectAnswers")
                        .HasColumnType("integer")
                        .HasColumnName("correct_answers");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("FinalizedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("finalized_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("started_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<int>("TotalQuestions")
                        .HasColumnType("integer")
                        .HasColumnName("total_questions");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_sessions");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_quiz_sessions_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_quiz_sessions_user_id");

                    b.ToTable("quiz_sessions", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<Guid>("QuizId")
                        .HasColumnType("uuid")
                        .HasColumnName("quiz_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_quiz_users");

                    b.HasIndex("QuizId")
                        .HasDatabaseName("ix_quiz_users_quiz_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_quiz_users_user_id");

                    b.ToTable("quiz_users", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Schedule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_time");

                    b.Property<DateTime>("LastModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_modified_at");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("start_date_time");

                    b.HasKey("Id")
                        .HasName("pk_schedules");

                    b.ToTable("schedules", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_at");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("role");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("username");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Answer", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answers_questions_question_id");

                    b.Navigation("Question");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Question", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.QuestionPackage", "QuestionPackage")
                        .WithMany("Questions")
                        .HasForeignKey("QuestionPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_questions_question_packages_question_package_id");

                    b.Navigation("QuestionPackage");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Quiz", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.QuestionPackage", "QuestionPackage")
                        .WithMany("Quizzes")
                        .HasForeignKey("QuestionPackageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quizzes_question_packages_question_package_id");

                    b.HasOne("PuzzleLab.Domain.Entities.Schedule", "Schedule")
                        .WithOne()
                        .HasForeignKey("PuzzleLab.Domain.Entities.Quiz", "ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quizzes_schedules_schedule_id");

                    b.Navigation("QuestionPackage");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizAnswer", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.Question", "Question")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_answers_questions_question_id");

                    b.HasOne("PuzzleLab.Domain.Entities.QuizSession", "QuizSession")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("QuizSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_answers_quiz_sessions_quiz_session_id");

                    b.HasOne("PuzzleLab.Domain.Entities.Answer", "Answer")
                        .WithMany("QuizAnswers")
                        .HasForeignKey("SelectedAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_answers_answers_selected_answer_id");

                    b.Navigation("Answer");

                    b.Navigation("Question");

                    b.Navigation("QuizSession");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizSession", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizSessions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_sessions_quizzes_quiz_id");

                    b.HasOne("PuzzleLab.Domain.Entities.User", "User")
                        .WithMany("QuizSessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_sessions_users_user_id");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizUser", b =>
                {
                    b.HasOne("PuzzleLab.Domain.Entities.Quiz", "Quiz")
                        .WithMany("QuizUsers")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_users_quizzes_quiz_id");

                    b.HasOne("PuzzleLab.Domain.Entities.User", "User")
                        .WithMany("QuizUsers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quiz_users_users_user_id");

                    b.Navigation("Quiz");

                    b.Navigation("User");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Answer", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuestionPackage", b =>
                {
                    b.Navigation("Questions");

                    b.Navigation("Quizzes");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.Quiz", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("QuizUsers");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.QuizSession", b =>
                {
                    b.Navigation("QuizAnswers");
                });

            modelBuilder.Entity("PuzzleLab.Domain.Entities.User", b =>
                {
                    b.Navigation("QuizSessions");

                    b.Navigation("QuizUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
