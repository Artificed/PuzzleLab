
@layout Components.Layout.AdminLayout

@using System.Globalization
@using System.Text.Json
@using PuzzleLab.Shared.DTOs.QuizSession
@using PuzzleLab.Shared.DTOs.QuizSession.Requests
@using PuzzleLab.Shared.DTOs.User
@using PuzzleLab.Web.Services.Api.Core.Implementations
@using PuzzleLab.Web.Services.Api.Core.Interfaces
@inject IUserService UserService
@inject IQuizSessionService QuizSessionService
@inject HttpClient Http
@inject IJSRuntime JSRuntime

<div class="container mx-auto px-4 py-8">
    <h1 class="text-2xl font-bold mb-6">Quiz Performance Statistics</h1>

    @if (loadingUsers)
    {
        <div class="flex justify-center items-center h-16">
            <div class="animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-blue-500"></div>
            <span class="ml-2">Loading users...</span>
        </div>
    }
    else if (userError != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline">@userError</span>
        </div>
    }
    else
    {
        <div class="mb-6">
            <label for="userSelect" class="block text-sm font-medium text-gray-700 mb-1">Select User</label>
            <div class="flex">
                <select id="userSelect" @bind="SelectedUserIdString" @bind:event="onchange"
                        class="flex-1 form-select block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 sm:text-sm">
                    <option value="">-- Select a user --</option>
                    @foreach (var user in users)
                    {
                        <option value="@user.Id">@user.Username (@user.Email)</option>
                    }
                </select>
                <button @onclick="RefreshData"
                        class="ml-2 inline-flex items-center px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                    <svg class="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24"
                         xmlns="http://www.w3.org/2000/svg">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                              d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                    Refresh
                </button>
            </div>
        </div>
    }

    @if (loading)
    {
        <div class="flex justify-center items-center h-64">
            <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
        </div>
    }
    else if (error != null)
    {
        <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Error!</strong>
            <span class="block sm:inline">@error</span>
        </div>
    }
    else if (selectedUserId == null)
    {
        <div class="bg-blue-100 border border-blue-400 text-blue-700 px-4 py-3 rounded relative mb-4" role="alert">
            <strong class="font-bold">Hint!</strong>
            <span class="block sm:inline">Please select a user to view their quiz statistics.</span>
        </div>
    }
    else if (userStats == null || !userStats.QuizStatistics.Any())
    {
        <div class="bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded relative mb-4"
             role="alert">
            <strong class="font-bold">No Data!</strong>
            <span class="block sm:inline">No quiz results found for the selected user.</span>
        </div>
    }
    else
    {
        <div class="grid grid-cols-1 lg:grid-cols-3 gap-6">

            <div class="bg-white rounded-lg shadow p-6">
                <h2 class="text-xl font-semibold mb-4">Summary</h2>
                <div class="grid grid-cols-2 gap-4">
                    <div class="bg-blue-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500">Total Quizzes</p>
                        <p class="text-2xl font-bold">@userStats?.QuizStatistics.Count</p>
                    </div>
                    <div class="bg-green-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500">Average Score</p>
                        <p class="text-2xl font-bold">@(userStats?.QuizStatistics.Any() == true ? $"{userStats.QuizStatistics.Average(r => r.ScorePercentage):F1}%" : "N/A")</p>
                    </div>
                    <div class="bg-purple-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500">Best Score</p>
                        <p class="text-2xl font-bold">@(userStats?.QuizStatistics.Any() == true ? $"{userStats.QuizStatistics.Max(r => r.ScorePercentage):F1}%" : "N/A")</p>
                    </div>
                    <div class="bg-yellow-50 p-4 rounded-lg">
                        <p class="text-sm text-gray-500">Completed</p>
                        <p class="text-2xl font-bold">@(userStats?.QuizStatistics.Count(r => r.QuizCompletedDate <= DateTime.Now))</p>
                    </div>
                </div>
            </div>


            <div class="bg-white rounded-lg shadow p-6 lg:col-span-2">
                <h2 class="text-xl font-semibold mb-4">Performance Over Time</h2>
                <div style="height: 300px; position: relative;">
                    <canvas id="performanceChart" width="100%" height="100%"></canvas>
                </div>
            </div>
        </div>


        <div class="mt-8 bg-white rounded-lg shadow overflow-hidden">
            <h2 class="text-xl font-semibold p-6 border-b">Quiz History</h2>
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                    <tr>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Quiz
                            Name
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Score
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Time
                            Taken
                        </th>
                        <th scope="col"
                            class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                            Details
                        </th>
                    </tr>
                    </thead>
                    <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var result in userStats?.QuizStatistics.OrderByDescending(r => r.ScheduleStartDate) ?? Enumerable.Empty<QuizStatisticsDto>())
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@result.ScheduleStartDate.ToString("MMM dd, yyyy")</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@result.QuizName</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <div class="flex items-center">
                                    <div class="w-full bg-gray-200 rounded-full h-2.5 mr-2">
                                        <div class="@GetScoreColorClass(result.ScorePercentage) h-2.5 rounded-full"
                                             style="width: @(result.ScorePercentage)%"></div>
                                    </div>
                                    <span>@result.CorrectAnswers / @result.TotalQuestions (@result.ScorePercentage.ToString("F1")%)</span>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@FormatTimeSpan(result.CompletionTime)</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <button @onclick="() => ShowQuizDetails(result.QuizId.ToString())"
                                        class="text-blue-600 hover:text-blue-800">View Details
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>


        @if (selectedQuizId != null)
        {
            var quizResult = userStats?.QuizStatistics.FirstOrDefault(r => r.QuizId.ToString() == selectedQuizId);
            if (quizResult != null)
            {
                <div
                    class="fixed inset-0 bg-black/80 flex items-center justify-center z-50 overflow-y-auto"
                    @onclick="CloseQuizDetails">
                    <div class="bg-white rounded-lg shadow-lg p-6 max-w-2xl w-full mx-4 my-8"
                         @onclick:stopPropagation="true">
                        <div class="flex justify-between items-center mb-4">
                            <h3 class="text-xl font-semibold">Quiz Details: @quizResult.QuizName</h3>
                            <button @onclick="CloseQuizDetails" class="text-gray-500 hover:text-gray-700">
                                <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                          d="M6 18L18 6M6 6l12 12"></path>
                                </svg>
                            </button>
                        </div>
                        <div class="mb-4 space-y-1">
                            <p><span
                                    class="font-semibold">Date:</span> @quizResult.ScheduleStartDate.ToString("MMMM dd, yyyy")
                            </p>
                            <p><span
                                    class="font-semibold">Completed:</span> @quizResult.QuizCompletedDate.ToString("MMMM dd, yyyy HH:mm:ss")
                            </p>
                            <p><span class="font-semibold">Score:</span> @quizResult.CorrectAnswers out
                                of @quizResult.TotalQuestions (@quizResult.ScorePercentage.ToString("F1")%)</p>
                            <p><span class="font-semibold">Time Taken:</span> @FormatTimeSpan(quizResult.CompletionTime)
                            </p>
                        </div>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h4 class="font-semibold mb-2">Score Distribution</h4>
                                <div style="height: 200px; position: relative;">
                                    <canvas id="scoreDistributionChart" width="100%" height="100%"></canvas>
                                </div>
                            </div>
                            <div class="bg-gray-50 p-4 rounded-lg">
                                <h4 class="font-semibold mb-2">Time Analysis</h4>
                                <div style="height: 200px; position: relative;">
                                    <canvas id="timeAnalysisChart" width="100%" height="100%"></canvas>
                                </div>
                            </div>
                        </div>
                        <div class="mt-6 text-right">
                            <button @onclick="CloseQuizDetails"
                                    class="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700">Close
                            </button>
                        </div>
                    </div>
                </div>
            }
        }
    }
</div>

@code {
    private bool loading = false;
    private bool loadingUsers = true;
    private string? error;
    private string? userError;
    private List<UserDto> users = new List<UserDto>();
    private Guid? selectedUserId;
    private UserQuizStatisticsDto? userStats;
    private string? selectedQuizId;
    private bool chartsRendered = false;

    private string? SelectedUserIdString
    {
        get => selectedUserId?.ToString();
        set
        {
            if (string.IsNullOrEmpty(value))
            {
                selectedUserId = null;
                userStats = null;
                chartsRendered = false;
                StateHasChanged();
            }
            else if (Guid.TryParse(value, out var newGuid))
            {
                if (selectedUserId != newGuid)
                {
                    selectedUserId = newGuid;
                    _ = LoadDataAsync();
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!loading && error == null && userStats?.QuizStatistics.Any() == true && !chartsRendered)
        {
            chartsRendered = true;
            await RenderPerformanceChartAsync();
        }

        if (selectedQuizId != null && userStats?.QuizStatistics.Any(r => r.QuizId.ToString() == selectedQuizId) == true)
        {
            await Task.Delay(50);
            await RenderQuizDetailsChartsAsync();
        }
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            loadingUsers = true;
            userError = null;
            StateHasChanged();

            var allUsers = await UserService.GetAllUsersAsync();
            if (allUsers != null && allUsers.userDtos != null)
            {
                users = allUsers.userDtos.OrderBy(u => u.Username).ToList();

                if (users.Any())
                {
                    SelectedUserIdString = users.First().Id.ToString();
                }
                else
                {
                    SelectedUserIdString = null;
                }
            }
            else
            {
                userError = "Failed to load users...";
                users = new List<UserDto>();
                SelectedUserIdString = null;
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading users: {ex}");
            userError = $"Failed to load users. Please try again later. ({ex.GetType().Name})";
        }
        finally
        {
            loadingUsers = false;
            StateHasChanged();
        }
    }

    private async Task RefreshData()
    {
        await LoadUsersAsync();
        if (selectedUserId.HasValue)
        {
            await LoadDataAsync();
        }
    }

    private async Task LoadDataAsync()
    {
        if (!selectedUserId.HasValue) return;

        try
        {
            loading = true;
            error = null;
            chartsRendered = false;
            StateHasChanged();

            if (selectedUserId is null)
            {
                return;
            }

            var response = await QuizSessionService.GetUserQuizStatisticsAsync(new GetUserQuizStatisticsRequest() { UserId = selectedUserId.ToString() });

            if (response is null)
            {
                error = "Failed to get response";
                return;
            }

            userStats = response.UserQuizStatisticsDto;

            if (userStats == null)
            {
                error = "Failed to load statistics data (received null).";
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error loading statistics: {ex}");
            error = $"Failed to load statistics. Please try again later. ({ex.GetType().Name})";
        }
        finally
        {
            loading = false;
            StateHasChanged();
        }
    }


    private async Task RenderPerformanceChartAsync()
    {
        if (userStats?.QuizStatistics.Any() != true) return;

        var chartData = userStats.QuizStatistics
            .OrderBy(r => r.ScheduleStartDate)
            .Select(r => new { date = r.ScheduleStartDate.ToString("yyyy-MM-dd"), score = r.ScorePercentage, quiz = r.QuizName })
            .ToArray();

        try
        {
            await JSRuntime.InvokeVoidAsync("chartInterop.renderPerformanceChart", "performanceChart", JsonSerializer.Serialize(chartData));
        }
        catch (JSException jsEx)
        {
            Console.Error.WriteLine($"JS Error rendering performance chart: {jsEx.Message}");
            error = "Could not render the performance chart. Please check the browser console (F12) for details.";
            StateHasChanged();
        }
    }

    private async Task RenderQuizDetailsChartsAsync()
    {
        if (selectedQuizId == null || userStats == null) return;

        var quizResult = userStats.QuizStatistics.FirstOrDefault(r => r.QuizId.ToString() == selectedQuizId);
        if (quizResult == null) return;

        var scoreData = new[]
        {
            new { name = "Correct", value = quizResult.CorrectAnswers },
            new { name = "Incorrect", value = quizResult.TotalQuestions - quizResult.CorrectAnswers }
        };

        var timeData = new[]
        {
            new { name = "Time Spent (min)", value = Math.Round(quizResult.CompletionTime.TotalMinutes, 2) },
            new { name = "Avg Time (min)", value = Math.Round(userStats.QuizStatistics.Any() ? userStats.QuizStatistics.Average(r => r.CompletionTime.TotalMinutes) : 0, 2) }
        };

        try
        {
            await JSRuntime.InvokeVoidAsync("chartInterop.renderScoreDistributionChart", "scoreDistributionChart", JsonSerializer.Serialize(scoreData));
            await JSRuntime.InvokeVoidAsync("chartInterop.renderTimeAnalysisChart", "timeAnalysisChart", JsonSerializer.Serialize(timeData));
        }
        catch (JSException jsEx)
        {
            Console.Error.WriteLine($"JS Error rendering detail charts: {jsEx.Message}");
        }
    }


    private void ShowQuizDetails(string quizId)
    {
        selectedQuizId = quizId;
    }

    private void CloseQuizDetails()
    {
        selectedQuizId = null;
    }


    private string GetScoreColorClass(decimal score) => score switch
    {
        >= 90 => "bg-green-600",
        >= 75 => "bg-green-500",
        >= 60 => "bg-yellow-500",
        >= 40 => "bg-orange-500",
        _ => "bg-red-500"
    };

    private string FormatTimeSpan(TimeSpan ts)
    {
        if (ts.TotalHours >= 1) return $"{(int)ts.TotalHours}h {ts.Minutes}m {ts.Seconds}s";
        if (ts.TotalMinutes >= 1) return $"{ts.Minutes}m {ts.Seconds}s";
        return $"{ts.Seconds}s";
    }

}
