@page "/quiz/{QuizId:guid}"
@using PuzzleLab.Shared.DTOs.QuizSession
@using PuzzleLab.Web.Services.Api.Core.Interfaces
@using PuzzleLab.Web.Services.State
@using PuzzleLab.Web.Services.Ui
@using System.Timers
@using PuzzleLab.Shared.DTOs.QuizAnswer.Requests
@using PuzzleLab.Shared.DTOs.QuizSession.Requests

@layout Components.Layout.UserLayout

@inject IQuizSessionService QuizSessionService
@inject IQuizAnswerService QuizAnswerService
@inject NavigationManager NavigationManager
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Quiz - PuzzleLab</PageTitle>

<div class="w-full max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 mb-6">
    @if (_isLoading)
    {
        <LoadingSpinner/>
    }
    else if (_quizError)
    {
        <QuizError ErrorMessage="@_errorMessage" OnNavigateToDashboard="NavigateToUserDashboard"/>
    }
    else
    {
        <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
            <!-- Quiz Header Component -->
            <QuizHeader
                Title="@_quizTitle"
                CurrentQuestion="@(_currentQuestionIndex + 1)"
                TotalQuestions="@_totalQuestions"
                StartedAt="@(_quizSession?.StartedAt ?? DateTime.Now)"
                TimeRemaining="@_timeRemaining"
                Status="@(_quizSession?.Status ?? "Active")"
                OnExitClick="ShowExitConfirmation"/>

            <!-- Progress Bar -->
            <ProgressBar Current="@(_currentQuestionIndex + 1)" Total="@_totalQuestions"/>

            <!-- Question Display Component -->
            @if (_currentQuestion != null)
            {
                <QuestionDisplay
                    Question="@_currentQuestion"
                    SelectedAnswerIndex="@_selectedAnswerIndex"
                    OnAnswerSelected="SelectAnswer"/>
            }

            <!-- Navigation Buttons Component -->
            <NavigationButtons
                CurrentIndex="@_currentQuestionIndex"
                TotalQuestions="@_totalQuestions"
                OnPrevious="PreviousQuestion"
                OnNext="NextQuestion"
                OnSubmit="ShowSubmitConfirmation"/>
        </div>

        <!-- Question Navigator Component -->
        <QuestionNavigator
            CurrentIndex="@_currentQuestionIndex"
            TotalQuestions="@_totalQuestions"
            AnsweredQuestions="@_answeredQuestions"
            SessionId="@(_quizSession?.Id.ToString() ?? "Loading...")"
            OnQuestionSelected="JumpToQuestion"/>
    }
</div>

<!-- Confirmation Dialog Components -->
<ConfirmationDialog
    IsVisible="@_showExitConfirmation"
    Title="Exit Quiz"
    Message="Are you sure you want to exit the quiz? Your current progress will be saved, but if the quiz has a time limit, the timer will continue to run."
    ConfirmButtonText="Exit Quiz"
    ConfirmButtonClass="bg-red-600 hover:bg-red-700"
    OnCancel="CancelExit"
    OnConfirm="ConfirmExit"/>

<ConfirmationDialog
    IsVisible="@_showSubmitConfirmation"
    Title="Submit Quiz"
    Message="@($"Are you sure you want to submit your quiz? You've answered {_answeredQuestions.Count} out of {_totalQuestions} questions.")"
    ConfirmButtonText="Submit Quiz"
    ConfirmButtonClass="bg-green-600 hover:bg-green-700"
    OnCancel="CancelSubmit"
    OnConfirm="SubmitQuiz">
    @if (_answeredQuestions.Count < _totalQuestions)
    {
        <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
            <p class="text-sm text-yellow-800">
                Warning: You have @(_totalQuestions - _answeredQuestions.Count) unanswered questions.
                Once submitted, you won't be able to change your answers.
            </p>
        </div>
    }
</ConfirmationDialog>

@code {
    [Parameter] public Guid QuizId { get; set; }

    private bool _isLoading = true;
    private bool _quizError = false;
    private string _errorMessage = string.Empty;
    private string _quizTitle = "Sample Quiz";
    private int _currentQuestionIndex = 0;
    private int _totalQuestions = 0;
    private int _selectedAnswerIndex = -1;
    private Dictionary<int, int> _answeredQuestions = new Dictionary<int, int>();
    private QuestionWithAnswerDto? _currentQuestion;
    private QuizSessionDto? _quizSession;
    private TimeSpan _timeRemaining = TimeSpan.FromMinutes(30); // Mock value - 30 minutes
    private bool _showExitConfirmation = false;
    private bool _showSubmitConfirmation = false;
    private System.Timers.Timer? _timer;
    private Dictionary<int, Guid> _questionIdMap = new Dictionary<int, Guid>(); // Maps question index to question ID
    private Dictionary<Guid, int> _questionIdToAnswerIndexMap = new Dictionary<Guid, int>(); // Maps question ID to answer index
    private bool _isCurrentAnswerSaved = true; // Tracks if current answer has been saved
    private Dictionary<Guid, Guid> _questionIdToSelectedAnswerIdMap = new Dictionary<Guid, Guid>(); // Maps question ID to selected answer ID

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserState?.CurrentUser?.Id is null)
            {
                ToastService.ShowError("User is not logged in.", "Error");
                return;
            }

            var request = new CreateOrGetQuizSessionRequest() { QuizId = QuizId, };
            var response = await QuizSessionService.CreateOrGetQuizSessionAsync(request);

            if (response is null)
            {
                ToastService.ShowError("Failed to create quiz session.", "Error");
                return;
            }

            _quizSession = response.QuizSessionDto;
            _totalQuestions = _quizSession.TotalQuestions;
            // _quizTitle = _quizSession.Title ?? "Sample Quiz";

            // Load saved answers if session exists and has answers
            if (_quizSession.Id != Guid.Empty)
            {
                await LoadSavedAnswers();

                // Load all question IDs and update answered questions dictionary
                await LoadQuestionMappings();
            }

            await LoadCurrentQuestion();

            // Set time remaining based on session data (mock for now)
            _timeRemaining = TimeSpan.FromMinutes(30); // Use actual time from session when available

            StartTimer();
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _isLoading = false;
            _quizError = true;
            _errorMessage = ex.Message;
        }
    }

    private async Task LoadSavedAnswers()
    {
        try
        {
            if (_quizSession == null) return;

            var request = new GetQuizAnswersBySessionRequest()
            {
                SessionId = _quizSession.Id
            };
            var savedAnswersResponse = await QuizAnswerService.GetQuizAnswersBySessionIdAsync(request);

            if (savedAnswersResponse != null && savedAnswersResponse.SaveQuizAnswerDtos.Count > 0)
            {
                // Process saved answers
                foreach (var savedAnswer in savedAnswersResponse.SaveQuizAnswerDtos)
                {
                    Guid questionId = savedAnswer.QuestionId;
                    Guid selectedAnswerId = savedAnswer.SelectedAnswerId;

                    // Store the mapping between question ID and selected answer ID
                    _questionIdToSelectedAnswerIdMap[questionId] = selectedAnswerId;
                }
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load saved answers: {ex.Message}", "Error");
        }
    }

    // New method to load all question IDs and set up mappings
    private async Task LoadQuestionMappings()
    {
        // Fetch each question to map indices to question IDs
        for (int i = 0; i < _totalQuestions; i++)
        {
            var request = new GetCurrentQuestionRequest
            {
                QuizId = QuizId.ToString(),
                QuestionIndex = i
            };

            var response = await QuizSessionService.GetCurrentQuestionAsync(request);

            if (response != null && response.QuestionWithAnswerDto != null)
            {
                var question = response.QuestionWithAnswerDto;
                _questionIdMap[i] = question.Id;

                // Check if we have a saved answer for this question
                if (_questionIdToSelectedAnswerIdMap.ContainsKey(question.Id))
                {
                    Guid savedAnswerId = _questionIdToSelectedAnswerIdMap[question.Id];

                    // Find the index of this answer in the answers array
                    for (int j = 0; j < question.Answers.Length; j++)
                    {
                        if (question.Answers[j].Id == savedAnswerId)
                        {
                            // Add to answered questions
                            _answeredQuestions[i] = j;
                            break;
                        }
                    }
                }
            }
        }

        // Force UI update
        StateHasChanged();
    }

    private void StartTimer()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _timeRemaining = _timeRemaining.Subtract(TimeSpan.FromSeconds(1));

        if (_timeRemaining.TotalSeconds <= 0)
        {
            _timer?.Stop();
            // Auto-submit the quiz when time runs out
            InvokeAsync(async () => { await SubmitQuiz(); });
        }

        InvokeAsync(StateHasChanged);
    }

    // Modified to only store the answer locally, not save to server immediately
    private void SelectAnswer(int answerIndex)
    {
        _selectedAnswerIndex = answerIndex;
        _answeredQuestions[_currentQuestionIndex] = answerIndex;

        // Update the question ID to answer mapping
        if (_currentQuestion != null && _questionIdMap.ContainsKey(_currentQuestionIndex))
        {
            _questionIdToAnswerIndexMap[_currentQuestion.Id] = answerIndex;
        }

        _isCurrentAnswerSaved = false; // Mark current answer as not saved

        // Force UI update
        StateHasChanged();
    }

    // Save only the current question's answer to the server
    private async Task SaveCurrentAnswer()
    {
        // Only save if there's an answer selected for the current question and it's not already saved
        if (_answeredQuestions.ContainsKey(_currentQuestionIndex) && !_isCurrentAnswerSaved && _quizSession != null && _currentQuestion != null)
        {
            try
            {
                int answerIndex = _answeredQuestions[_currentQuestionIndex];

                // Get the ID of the selected answer option
                Guid selectedAnswerId = _currentQuestion.Answers[answerIndex].Id;

                var request = new SaveQuizAnswerRequest()
                {
                    SessionId = _quizSession.Id,
                    QuestionId = _currentQuestion.Id,
                    Answer = selectedAnswerId.ToString() // Use the actual answer ID TODO: Might need to fix this
                };

                var response = await QuizAnswerService.SaveQuizAnswerAsync(request);

                if (response is null)
                {
                    ToastService.ShowError("Failed to save answer!", "Error");
                }
                else
                {
                    // Update our mapping
                    _questionIdToSelectedAnswerIdMap[_currentQuestion.Id] = selectedAnswerId;
                    _isCurrentAnswerSaved = true;
                }
            }
            catch (Exception e)
            {
                ToastService.ShowError($"Failed to save answer! {e}", "Error");
            }
        }
    }

    // Save all unsaved answers - used when submitting the quiz
    private async Task SaveAllAnswers()
    {
        // Implementation remains the same
    }

    private async Task NextQuestion()
    {
        // Save current answer before navigating
        await SaveCurrentAnswer();

        if (_currentQuestionIndex < _totalQuestions - 1)
        {
            _currentQuestionIndex++;
            await LoadCurrentQuestion();
        }
    }

    private async Task PreviousQuestion()
    {
        // Save current answer before navigating
        await SaveCurrentAnswer();

        if (_currentQuestionIndex > 0)
        {
            _currentQuestionIndex--;
            await LoadCurrentQuestion();
        }
    }

    private async Task JumpToQuestion(int questionIndex)
    {
        // Save current answer before navigating
        await SaveCurrentAnswer();

        if (questionIndex >= 0 && questionIndex < _totalQuestions)
        {
            _currentQuestionIndex = questionIndex;
            await LoadCurrentQuestion();
        }
    }

    private async Task LoadCurrentQuestion()
    {
        var request = new GetCurrentQuestionRequest
        {
            QuizId = QuizId.ToString(),
            QuestionIndex = _currentQuestionIndex
        };
        var response = await QuizSessionService.GetCurrentQuestionAsync(request);

        if (response is null)
        {
            ToastService.ShowError("Failed to fetch question!", "Error");
            return;
        }

        _currentQuestion = response.QuestionWithAnswerDto;

        if (_currentQuestion != null)
        {
            _questionIdMap[_currentQuestionIndex] = _currentQuestion.Id;

            // Reset selected answer index
            _selectedAnswerIndex = -1;

            // Check if we have a saved answer for this question
            if (_questionIdToSelectedAnswerIdMap.ContainsKey(_currentQuestion.Id))
            {
                // Get the saved answer ID
                Guid savedAnswerId = _questionIdToSelectedAnswerIdMap[_currentQuestion.Id];

                // Find the index of this answer in the current question's answers array
                for (int i = 0; i < _currentQuestion.Answers.Length; i++)
                {
                    if (_currentQuestion.Answers[i].Id == savedAnswerId)
                    {
                        _selectedAnswerIndex = i;
                        _answeredQuestions[_currentQuestionIndex] = i;
                        break;
                    }
                }

                _isCurrentAnswerSaved = true; // This answer was loaded from the database
            }
            else if (_answeredQuestions.ContainsKey(_currentQuestionIndex))
            {
                // Use locally stored answer if available
                _selectedAnswerIndex = _answeredQuestions[_currentQuestionIndex];
                _isCurrentAnswerSaved = false; // This answer wasn't loaded from the database
            }
            else
            {
                // No answer selected for this question
                _selectedAnswerIndex = -1;
                _isCurrentAnswerSaved = true;
            }

            // Force UI update
            StateHasChanged();
        }
    }

    private void ShowExitConfirmation()
    {
        _showExitConfirmation = true;
    }

    private void CancelExit()
    {
        _showExitConfirmation = false;
    }

    private async Task ConfirmExit()
    {
        // Save current answer before exiting
        await SaveCurrentAnswer();
        NavigateToUserDashboard();
    }

    private void NavigateToUserDashboard()
    {
        _timer?.Stop();
        _timer?.Dispose();

        NavigationManager.NavigateTo("/user/dashboard");
    }

    private void ShowSubmitConfirmation()
    {
        _showSubmitConfirmation = true;
    }

    private void CancelSubmit()
    {
        _showSubmitConfirmation = false;
    }

    private async Task SubmitQuiz()
    {
        _timer?.Stop();
        _timer?.Dispose();

        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // Save any unsaved answers (primarily the current one) before submitting
            await SaveAllAnswers();

            // Update session status
            if (_quizSession != null)
            {
                _quizSession.Status = "Completed";
                _quizSession.FinalizedAt = DateTime.Now;

                // Mock calculation of correct answers
                _quizSession.CorrectAnswers = _answeredQuestions.Count / 2; // Just a mock value
            }

            // For now, simulate API call
            await Task.Delay(1000);

            ToastService.ShowSuccess("Quiz submitted successfully!", "Success");

            // Navigate to results page or dashboard
            NavigationManager.NavigateTo($"/user/results/{_quizSession?.Id}");
        }
        catch (Exception ex)
        {
            _isLoading = false;
            ToastService.ShowError($"Error submitting quiz: {ex.Message}", "Error");
        }
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }

}