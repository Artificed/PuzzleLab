@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager NavigationManager
@inject IConfiguration Configuration
@implements IAsyncDisposable

<span class="server-time-clock-signalr">@_displayTime</span>

@code {
    private string _displayTime = "Connecting...";
    private HubConnection? _hubConnection;

    private readonly TimeSpan _targetOffset = TimeSpan.FromHours(7);

    protected override async Task OnInitializedAsync()
    {
        var apiBaseUrl = Configuration["ApiSettings:BaseUrl"];

        if (string.IsNullOrEmpty(apiBaseUrl))
        {
            _displayTime = "Config Error";
            Console.WriteLine("Error: 'ApiSettings:BaseUrl' is not configured in appsettings.json");
            return;
        }

        var hubUrl = $"{apiBaseUrl.TrimEnd('/')}/hubs/time";


        Console.WriteLine($"Connecting to SignalR Hub at: {hubUrl}");

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(hubUrl)
            .WithAutomaticReconnect()
            .Build();

        _hubConnection.On<DateTimeOffset>("ReceiveServerTime", (serverTimeUtc) =>
        {
            var targetTime = serverTimeUtc.ToOffset(_targetOffset);
            _displayTime = targetTime.ToString("HH:mm:ss"); // Format as needed
            InvokeAsync(StateHasChanged);
        });

        try
        {
            await _hubConnection.StartAsync();
            _displayTime = "Waiting...";
            Console.WriteLine("SignalR Connection started.");
        }
        catch (Exception ex)
        {
            _displayTime = "Error";
            Console.WriteLine($"Error starting SignalR connection: {ex.Message}");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            Console.WriteLine("Disposing SignalR connection.");

            await _hubConnection.StopAsync();
            await _hubConnection.DisposeAsync();
        }

        GC.SuppressFinalize(this);
    }

}
