@page "/admin/users"
@layout PuzzleLab.Web.Components.Layout.AdminLayout

@using PuzzleLab.Shared.DTOs.Requests
@using PuzzleLab.Shared.DTOs.Responses
@using PuzzleLab.Web.Services.State
@using PuzzleLab.Web.Components.Navbars
@using System.Collections.Generic

@inject NavigationManager NavigationManager
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Manage Users - PuzzleLab</PageTitle>

<div class="space-y-6">
    <div class="flex items-center justify-between mb-4">
        <h1 class="text-2xl font-bold">Manage Users</h1>
        <div class="relative">
            <input type="text"
                   @bind-value="_searchTerm"
                   @bind-value:event="oninput"
                   @onkeyup="SearchUsers"
                   placeholder="Search users..."
                   class="h-10 w-64 rounded-md border border-gray-200 px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
        </div>
    </div>

    @if (_isLoading)
    {
        <div class="flex justify-center p-8">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
        </div>
    }
    else if (_users.Count == 0)
    {
        <div class="flex justify-center items-center p-8 border border-gray-200 rounded-lg">
            <p class="text-gray-500">No users found</p>
        </div>
    }
    else
    {
        <div class="border border-gray-200 rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                <tr>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Username
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Created At
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last
                        Login
                    </th>
                    <th scope="col"
                        class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Actions
                    </th>
                </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                @foreach (var user in _filteredUsers)
                {
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">@user.Username</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@user.Email</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span
                                    class="px-2 py-1 text-xs rounded-full @(user.Role == "Admin" ? "bg-gray-100" : "bg-green-100 text-green-800")">
                                    @user.Role
                                </span>
                        </td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@user.CreatedAt.ToString("MMM dd, yyyy")</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">@(user.LastLoginAt?.ToString("MMM dd, yyyy HH:mm") ?? "Never")</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                            <div class="flex space-x-2">
                                <button @onclick="() => ShowEditUserModal(user)"
                                        class="text-blue-600 hover:text-blue-900">Edit
                                </button>
                                <button @onclick="() => ShowDeleteConfirmation(user)"
                                        class="text-red-600 hover:text-red-900">Delete
                                </button>
                            </div>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="flex justify-between items-center mt-4">
            <div class="text-sm text-gray-500">
                Showing @_filteredUsers.Count of @_users.Count users
            </div>
            <div class="flex space-x-2">
                <button @onclick="PreviousPage"
                        disabled="@(_currentPage <= 1)"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                    Previous
                </button>
                <span class="inline-flex items-center justify-center h-10 px-4 py-2">
                        Page @_currentPage of @_totalPages
                    </span>
                <button @onclick="NextPage"
                        disabled="@(_currentPage >= _totalPages)"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                    Next
                </button>
            </div>
        </div>
    }
</div>

@if (_showAddUserModal)
{
    <div class="fixed w-full inset-0 bg-black/80 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <h2 class="text-xl font-bold mb-4">Add New User</h2>

            <EditForm Model="_newUser" OnValidSubmit="HandleAddUser" FormName="addUserForm" class="space-y-4">
                <DataAnnotationsValidator/>

                <div class="space-y-2">
                    <label for="username" class="text-sm font-medium">Username</label>
                    <InputText @bind-Value="_newUser.Username"
                               id="username"
                               placeholder="johndoe"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                    <ValidationMessage For="@(() => _newUser.Username)" class="text-red-600 text-xs"/>
                </div>

                <div class="space-y-2">
                    <label for="email" class="text-sm font-medium">Email</label>
                    <InputText @bind-Value="_newUser.Email"
                               id="email"
                               type="email"
                               placeholder="john.doe@example.com"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                    <ValidationMessage For="@(() => _newUser.Email)" class="text-red-600 text-xs"/>
                </div>

                <div class="space-y-2">
                    <label for="password" class="text-sm font-medium">Password</label>
                    <InputText @bind-Value="_newUser.Password"
                               id="password"
                               type="password"
                               placeholder="••••••••"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                    <ValidationMessage For="@(() => _newUser.Password)" class="text-red-600 text-xs"/>
                </div>

                <div class="space-y-2">
                    <label for="role" class="text-sm font-medium">Role</label>
                    <InputSelect @bind-Value="_newUser.Role"
                                 id="role"
                                 class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1">
                        <option value="User">User</option>
                        <option value="Admin">Admin</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _newUser.Role)" class="text-red-600 text-xs"/>
                </div>

                <div class="flex justify-end space-x-2 pt-4">
                    <button type="button"
                            @onclick="CloseAddUserModal"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                        Cancel
                    </button>
                    <button type="submit"
                            disabled="@_isSubmitting"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-gray-900 text-gray-50 hover:bg-gray-900/90 h-10 px-4 py-2">
                        @if (_isSubmitting)
                        {
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create User</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_showEditUserModal)
{
    <div class="fixed w-full inset-0 bg-black/80 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <h2 class="text-xl font-bold mb-4">Edit User</h2>

            <EditForm Model="_editUser" OnValidSubmit="HandleEditUser" FormName="editUserForm" class="space-y-4">
                <DataAnnotationsValidator/>

                <div class="space-y-2">
                    <label for="edit-username" class="text-sm font-medium">Username</label>
                    <InputText @bind-Value="_editUser.Username"
                               id="edit-username"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                    <ValidationMessage For="@(() => _editUser.Username)" class="text-red-600 text-xs"/>
                </div>

                <div class="space-y-2">
                    <label for="edit-email" class="text-sm font-medium">Email</label>
                    <InputText @bind-Value="_editUser.Email"
                               id="edit-email"
                               type="email"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                    <ValidationMessage For="@(() => _editUser.Email)" class="text-red-600 text-xs"/>
                </div>

                <div class="space-y-2">
                    <label for="edit-password" class="text-sm font-medium">New Password (leave empty to keep
                        current)</label>
                    <InputText @bind-Value="_editUser.Password"
                               id="edit-password"
                               type="password"
                               placeholder="••••••••"
                               class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1"/>
                </div>

                <div class="space-y-2">
                    <label for="edit-role" class="text-sm font-medium">Role</label>
                    <InputSelect @bind-Value="_editUser.Role"
                                 id="edit-role"
                                 class="flex h-10 w-full rounded-md border border-gray-200 bg-white px-3 py-2 text-sm focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1">
                        <option value="User">User</option>
                        <option value="Admin">Admin</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => _editUser.Role)" class="text-red-600 text-xs"/>
                </div>

                <div class="flex justify-end space-x-2 pt-4">
                    <button type="button"
                            @onclick="CloseEditUserModal"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                        Cancel
                    </button>
                    <button type="submit"
                            disabled="@_isSubmitting"
                            class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-gray-900 text-gray-50 hover:bg-gray-900/90 h-10 px-4 py-2">
                        @if (_isSubmitting)
                        {
                            <span>Saving...</span>
                        }
                        else
                        {
                            <span>Save Changes</span>
                        }
                    </button>
                </div>
            </EditForm>
        </div>
    </div>
}

@if (_showDeleteConfirmation)
{
    <div class="fixed w-full inset-0 bg-black/80 flex items-center justify-center z-50">
        <div class="bg-white rounded-lg shadow-lg p-6 w-full max-w-md">
            <h2 class="text-xl font-bold mb-4">Delete User</h2>
            <p class="mb-6">Are you sure you want to delete the user <span
                    class="font-bold">@_selectedUser.Username</span>? This action cannot be undone.</p>

            <div class="flex justify-end space-x-2">
                <button @onclick="CloseDeleteConfirmation"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 border border-gray-200 bg-white hover:bg-gray-100 h-10 px-4 py-2">
                    Cancel
                </button>
                <button @onclick="HandleDeleteUser"
                        disabled="@_isSubmitting"
                        class="inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-white transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-gray-950 focus-visible:ring-offset-1 disabled:pointer-events-none disabled:opacity-50 bg-red-600 text-white hover:bg-red-700 h-10 px-4 py-2">
                    @if (_isSubmitting)
                    {
                        <span>Deleting...</span>
                    }
                    else
                    {
                        <span>Delete User</span>
                    }
                </button>
            </div>
        </div>
    </div>
}

@code {
    private List<UserModel> _users = new();
    private List<UserModel> _filteredUsers = new();
    private bool _isLoading = true;
    private bool _isSubmitting = false;
    private string _searchTerm = "";
    private string _selectedRole = "";
    private int _pageSize = 10;
    private int _currentPage = 1;
    private int _totalPages => (_filteredUsers.Count + _pageSize - 1) / _pageSize;

    // Add User Modal
    private bool _showAddUserModal = false;
    private CreateUserModel _newUser = new();

    // Edit User Modal
    private bool _showEditUserModal = false;
    private EditUserModel _editUser = new();

    // Delete User Confirmation
    private bool _showDeleteConfirmation = false;
    private UserModel _selectedUser = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsersAsync();
    }

    private async Task LoadUsersAsync()
    {
        _isLoading = true;

        try
        {
            // Mock data for demonstration purposes
            // In a real implementation, you would fetch this from your API
            _users = new List<UserModel>
            {
                new() { Id = Guid.NewGuid().ToString(), Username = "admin", Email = "admin@puzzlelab.com", Role = "Admin", CreatedAt = DateTime.Now.AddDays(-30), LastLoginAt = DateTime.Now.AddHours(-2) },
                new() { Id = Guid.NewGuid().ToString(), Username = "john.doe", Email = "john.doe@example.com", Role = "User", CreatedAt = DateTime.Now.AddDays(-15), LastLoginAt = DateTime.Now.AddDays(-1) },
                new() { Id = Guid.NewGuid().ToString(), Username = "jane.smith", Email = "jane.smith@example.com", Role = "User", CreatedAt = DateTime.Now.AddDays(-10), LastLoginAt = DateTime.Now.AddHours(-8) },
                new() { Id = Guid.NewGuid().ToString(), Username = "robert.johnson", Email = "robert@example.com", Role = "User", CreatedAt = DateTime.Now.AddDays(-5), LastLoginAt = null }
            };

            FilterUsers();
        }
        catch (Exception ex)
        {
            // Handle error (you might want to show a toast notification here)
            Console.Error.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void FilterUsers()
    {
        _filteredUsers = _users
            .Where(u => string.IsNullOrEmpty(_searchTerm) ||
                        u.Username.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase) ||
                        u.Email.Contains(_searchTerm, StringComparison.OrdinalIgnoreCase))
            .Where(u => string.IsNullOrEmpty(_selectedRole) || u.Role == _selectedRole)
            .ToList();

        // Reset to first page when filtering
        _currentPage = 1;
    }

    private void SearchUsers()
    {
        FilterUsers();
    }

    private void PreviousPage()
    {
        if (_currentPage > 1)
        {
            _currentPage--;
        }
    }

    private void NextPage()
    {
        if (_currentPage < _totalPages)
        {
            _currentPage++;
        }
    }

    // Add User Modal Methods
    private void ShowAddUserModal()
    {
        _newUser = new CreateUserModel { Role = "User" };
        _showAddUserModal = true;
    }

    private void CloseAddUserModal()
    {
        _showAddUserModal = false;
    }

    private async Task HandleAddUser()
    {
        _isSubmitting = true;

        try
        {
            // In a real implementation, you would send this to your API
            // For now, we'll just mock adding the user to our list
            var newUser = new UserModel
            {
                Id = Guid.NewGuid().ToString(),
                Username = _newUser.Username,
                Email = _newUser.Email,
                Role = _newUser.Role,
                CreatedAt = DateTime.Now,
                LastLoginAt = null
            };

            _users.Add(newUser);
            FilterUsers();

            // Close the modal
            _showAddUserModal = false;

            // Show success notification (you might want to implement a toast service)
            // ToastService.ShowSuccess("User created successfully!");
        }
        catch (Exception ex)
        {
            // Handle error (you might want to show a toast notification here)
            Console.Error.WriteLine($"Error creating user: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    // Edit User Modal Methods
    private void ShowEditUserModal(UserModel user)
    {
        _editUser = new EditUserModel
        {
            Id = user.Id,
            Username = user.Username,
            Email = user.Email,
            Password = string.Empty, // Don't prefill the password
            Role = user.Role
        };

        _showEditUserModal = true;
    }

    private void CloseEditUserModal()
    {
        _showEditUserModal = false;
    }

    private async Task HandleEditUser()
    {
        _isSubmitting = true;

        try
        {
            // In a real implementation, you would send this to your API
            // For now, we'll just mock updating the user in our list
            var userToUpdate = _users.FirstOrDefault(u => u.Id == _editUser.Id);
            if (userToUpdate != null)
            {
                userToUpdate.Username = _editUser.Username;
                userToUpdate.Email = _editUser.Email;
                userToUpdate.Role = _editUser.Role;
                // Note: In a real implementation, you'd handle password updates separately
            }

            FilterUsers();

            // Close the modal
            _showEditUserModal = false;

            // Show success notification
            // ToastService.ShowSuccess("User updated successfully!");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error updating user: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    // Delete User Confirmation Methods
    private void ShowDeleteConfirmation(UserModel user)
    {
        _selectedUser = user;
        _showDeleteConfirmation = true;
    }

    private void CloseDeleteConfirmation()
    {
        _showDeleteConfirmation = false;
    }

    private async Task HandleDeleteUser()
    {
        _isSubmitting = true;

        try
        {
            // In a real implementation, you would send this to your API
            // For now, we'll just mock removing the user from our list
            _users.RemoveAll(u => u.Id == _selectedUser.Id);
            FilterUsers();

            // Close the confirmation dialog
            _showDeleteConfirmation = false;

            // Show success notification
            // ToastService.ShowSuccess("User deleted successfully!");
        }
        catch (Exception ex)
        {
            // Handle error
            Console.Error.WriteLine($"Error deleting user: {ex.Message}");
        }
        finally
        {
            _isSubmitting = false;
        }
    }

    // Model classes for the page
    public class UserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; }
        public DateTime? LastLoginAt { get; set; }
    }

    public class CreateUserModel
    {
        // Add Data Annotations in a real implementation
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Role { get; set; } = string.Empty;
    }

    public class EditUserModel
    {
        public string Id { get; set; } = string.Empty;
        public string Username { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty; // Optional for updates
        public string Role { get; set; } = string.Empty;
    }

}
