@using PuzzleLab.Shared.DTOs.Answer
@using PuzzleLab.Shared.DTOs.Answer.Requests
@using PuzzleLab.Shared.DTOs.Question
@using PuzzleLab.Web.Services.Api.Core.Interfaces
@using PuzzleLab.Web.Services.Ui

@inject IAnswerService AnswerService
@inject IQuestionService QuestionService

<div class="@(IsVisible ? "fixed inset-0 flex items-center justify-center z-50" : "hidden")">
    <div class="fixed inset-0 bg-black opacity-50" @onclick="OnClose"></div>
    <div class="bg-white rounded-lg shadow-lg w-full max-w-3xl z-10 max-h-[90vh] overflow-y-auto">
        <div class="flex justify-between items-center border-b border-gray-200 px-6 py-4">
            <h3 class="text-xl font-semibold text-gray-900">Manage Answers</h3>
            <button @onclick="OnClose" class="text-gray-400 hover:text-gray-600 focus:outline-none">
                <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24"
                     stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                </svg>
            </button>
        </div>

        @if (_isLoading)
        {
            <div class="flex justify-center p-8">
                <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500"></div>
            </div>
        }
        else
        {
            <div class="p-6">
                <div class="mb-6">
                    <h4 class="text-lg font-medium mb-2">Question</h4>
                    <div class="bg-gray-50 p-4 rounded-lg">
                        @if (Question?.ImageData != null && !string.IsNullOrEmpty(Question.ImageMimeType))
                        {
                            <div class="mb-4 w-full h-64 bg-gray-100 overflow-hidden">
                                <img
                                    src="data:@Question.ImageMimeType;base64,@Convert.ToBase64String(Question.ImageData)"
                                    alt="Question image" class="w-full h-full object-contain"/>
                            </div>
                        }
                        <p>@Question?.Text</p>
                    </div>
                </div>

                <h4 class="text-lg font-medium mb-4">Answers (Max 4)</h4>

                <div class="mb-3 text-sm font-medium text-gray-600">
                    Use the button to select the correct answer.
                </div>

                <div class="space-y-3">
                    @for (int i = 0; i < _answers.Count; i++)
                    {
                        var index = i;
                        <div
                            class="flex items-center p-3 border rounded-md @(_answers[index].IsCorrect ? "bg-green-50 border-green-300" : "border-gray-200")">
                            <div class="mr-3 flex-shrink-0">
                                <input type="radio"
                                       id="correct-@index"
                                       name="correctAnswer"
                                       checked="@_answers[index].IsCorrect"
                                       @onchange="() => SetCorrectAnswer(index)"
                                       class="h-4 w-4 text-blue-600 focus:ring-black cursor-pointer"/>
                            </div>
                            <div class="flex-1">
                                <input type="text"
                                       placeholder="Enter answer text"
                                       @bind="_answers[index].Text"
                                       class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-1 focus:ring-black"/>
                            </div>
                            <div class="flex items-center justify-center ml-2 w-10 flex-shrink-0">
                                <button @onclick="() => RemoveAnswer(index)"
                                        class="text-gray-400 hover:text-red-500 p-1.5 rounded-full hover:bg-red-50 transition-colors">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none"
                                         viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                              d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                                    </svg>
                                </button>
                            </div>
                        </div>
                    }

                    @if (_answers.Count < 4)
                    {
                        <button @onclick="AddNewAnswer"
                                class="w-full flex justify-center items-center px-4 py-2.5 border border-dashed border-gray-300 rounded-md text-gray-500 hover:text-gray-700 hover:border-gray-400 transition-colors">
                            <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-1.5" fill="none"
                                 viewBox="0 0 24 24" stroke="currentColor">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
                                      d="M12 4v16m8-8H4"/>
                            </svg>
                            Add Answer
                        </button>
                    }
                </div>
            </div>

            <div class="border-t border-gray-200 px-6 py-4 flex justify-end space-x-3 bg-gray-50">
                <button @onclick="OnClose"
                        class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black">
                    Cancel
                </button>
                <button @onclick="SaveAnswers"
                        class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-black disabled:opacity-50 disabled:cursor-not-allowed"
                        disabled="@_isSaving">
                    @if (_isSaving)
                    {
                        <span class="inline-block mr-2">
                            <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                        </span>
                        <span>Saving...</span>
                    }
                    else
                    {
                        <span>Save Answers</span>
                    }
                </button>
            </div>
        }
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public QuestionDto Question { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback<List<AnswerDto>> OnSaveSuccess { get; set; }

    private List<CreateAnswerDto> _answers = new();
    private bool _isLoading = false;
    private bool _isSaving = false;

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && Question != null)
        {
            await LoadAnswers();
        }
    }

    private async Task LoadAnswers()
    {
        _isLoading = true;
        try
        {
            var request = new GetAnswersByQuestionRequest() { QuestionId = Question.Id };
            var response = await AnswerService.GetAnswersByQuestionIdAsync(request);

            if (response?.AnswerDtos is null)
            {
                ToastService.ShowError("Failed to load answers! Please try again", "Error Loading Answers");
                return;
            }

            _answers = response.AnswerDtos?.Select(ans => new CreateAnswerDto
            {
                Text = ans.Text,
                IsCorrect = ans.IsCorrect
            }).ToList() ?? new List<CreateAnswerDto>();

            if (_answers.Count == 0)
            {
                AddNewAnswer();
            }

            if (!_answers.Any(a => a.IsCorrect))
            {
                _answers[0].IsCorrect = true;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading answers: {ex.Message}");
            ToastService.ShowError("Failed to load answers. Please try again.", "Error Loading Answers");
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void AddNewAnswer()
    {
        if (_answers.Count >= 4)
        {
            return;
        }

        _answers.Add(new CreateAnswerDto()
        {
            Text = "",
            IsCorrect = _answers.Count == 0
        });
    }

    private void RemoveAnswer(int index)
    {
        if (_answers.Count <= 1)
        {
            ToastService.ShowError("At least one answer is required!", "Error Adding Answers");
            return;
        }

        var isCorrect = _answers[index].IsCorrect;
        _answers.RemoveAt(index);

        if (isCorrect && _answers.Any())
        {
            _answers[0].IsCorrect = true;
        }
    }

    private void SetCorrectAnswer(int index)
    {
        for (int i = 0; i < _answers.Count; i++)
        {
            _answers[i].IsCorrect = (i == index);
        }
    }

    private async Task SaveAnswers()
    {
        if (_answers.Count == 0)
        {
            ToastService.ShowError("At least one answer is required!", "Error Adding Answers");
            return;
        }

        if (!_answers.Any(a => a.IsCorrect))
        {
            ToastService.ShowError("One answer needs to be marked at correct!", "Error Adding Answers");
            return;
        }

        if (_answers.Any(a => string.IsNullOrWhiteSpace(a.Text)))
        {
            ToastService.ShowError("All answers must have text!", "Error Adding Answers");
            return;
        }

        _isSaving = true;
        try
        {
            var request = new SaveAnswersRequest
            {
                QuestionId = Question.Id.ToString(),
                AnswerData = _answers
            };

            var response = await AnswerService.SaveAnswersAsync(request);

            if (response?.SavedAnswers is null)
            {
                ToastService.ShowError("Failed to save answers! Please try again", "Error Saving Answers");
            }
            else
            {
                ToastService.ShowSuccess("Answers saved successfully!", "Success!");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving answers: {ex.Message}");
            ToastService.ShowError("Failed to save answers! Please try again", "Error Adding Answers");
        }
        finally
        {
            _isSaving = false;
            StateHasChanged();
        }
    }

}
