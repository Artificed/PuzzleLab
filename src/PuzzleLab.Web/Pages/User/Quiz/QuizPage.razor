@page "/quiz/{QuizId:guid}"
@using PuzzleLab.Shared.DTOs.QuizSession
@using PuzzleLab.Web.Services.Api.Core.Interfaces
@using PuzzleLab.Web.Services.State
@using PuzzleLab.Web.Services.Ui
@using System.Timers
@using PuzzleLab.Shared.DTOs.QuizSession.Requests

@layout Components.Layout.UserLayout

@inject IQuizSessionService QuizSessionService
@inject NavigationManager NavigationManager
@inject UserStateService UserState
@rendermode InteractiveServer

<PageTitle>Quiz - PuzzleLab</PageTitle>

<div class="w-full max-w-5xl mx-auto px-4 sm:px-6 lg:px-8 mb-6">
    @if (_isLoading)
    {
        <div class="flex justify-center items-center h-96">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900"></div>
        </div>
    }
    else if (_quizError)
    {
        <div class="flex flex-col items-center justify-center h-96 space-y-4">
            <div class="text-center">
                <h2 class="text-2xl font-bold text-gray-900 mb-2">Unable to load quiz</h2>
                <p class="text-gray-600">@_errorMessage</p>
            </div>
            <button @onclick="NavigateToUserDashboard"
                    class="px-4 py-2 bg-blue-600 text-white rounded-md shadow hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2">
                Return to Dashboard
            </button>
        </div>
    }
    else
    {
        <div class="bg-white shadow-sm rounded-lg border border-gray-200 overflow-hidden">
            <!-- Quiz Header -->
            <div class="border-b border-gray-200 bg-gray-50 p-4">
                <div class="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
                    <div>
                        <h1 class="text-xl font-bold text-gray-900">@_quizTitle</h1>
                        <p class="text-sm text-gray-500">Question @(_currentQuestionIndex + 1) of @_totalQuestions</p>
                        <p class="text-xs text-gray-500">
                            Started: @(_quizSession?.StartedAt.ToString("MMM dd, yyyy HH:mm") ?? "Loading...")</p>
                    </div>
                    <div class="flex items-center gap-4">
                        <div class="bg-blue-50 border border-blue-200 rounded-md px-3 py-1">
                            <span
                                class="text-blue-800 font-medium">Time Left: @FormatTimeRemaining(_timeRemaining)</span>
                        </div>
                        <div class="bg-green-50 border border-green-200 rounded-md px-3 py-1">
                            <span class="text-green-800 font-medium">Status: @(_quizSession?.Status ?? "Active")</span>
                        </div>
                        <button @onclick="ShowExitConfirmation"
                                class="px-3 py-1 text-sm border border-gray-300 rounded-md shadow-sm text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                            Exit Quiz
                        </button>
                    </div>
                </div>
            </div>

            <!-- Progress Bar -->
            <div class="w-full bg-gray-200 h-1">
                <div class="bg-blue-600 h-1"
                     style="width: @((_currentQuestionIndex + 1) * 100 / _totalQuestions)%"></div>
            </div>

            <!-- Question Content -->
            <div class="p-6">
                @if (_currentQuestion != null)
                {
                    <div class="space-y-6">
                        <!-- Question Text -->
                        <div class="text-lg font-medium text-gray-900">
                            @_currentQuestion.Text
                        </div>

                        <!-- Question Image (if present) -->
                        @if (_currentQuestion.ImageData != null && _currentQuestion.ImageData.Length > 0)
                        {
                            <div class="flex justify-center my-4">
                                <img
                                    src="data:@_currentQuestion.ImageMimeType;base64,@Convert.ToBase64String(_currentQuestion.ImageData)"
                                    alt="Question Image"
                                    class="max-w-full max-h-96 rounded-lg shadow-md border border-gray-200"/>
                            </div>
                        }

                        <!-- Answer Options -->
                        <div class="space-y-3">
                            <p class="font-medium text-gray-700">Select your answer:</p>
                            <div class="space-y-2">
                                @for (int i = 0; i < _currentQuestion.Answers.Length; i++)
                                {
                                    string answer = _currentQuestion.Answers[i];
                                    int index = i; // Capture the index value for the lambda
                                    <div @onclick="() => SelectAnswer(index)"
                                         class="border @(_selectedAnswerIndex == index ? "border-blue-500 bg-blue-50" : "border-gray-300 hover:bg-gray-50")
                                                rounded-lg p-4 cursor-pointer transition-colors">
                                        <div class="flex items-center">
                                            <div class="flex-shrink-0">
                                                <div
                                                    class="w-5 h-5 border @(_selectedAnswerIndex == index ? "border-blue-600" : "border-gray-400") rounded-full flex items-center justify-center">
                                                    @if (_selectedAnswerIndex == index)
                                                    {
                                                        <div class="w-3 h-3 rounded-full bg-blue-600"></div>
                                                    }
                                                </div>
                                            </div>
                                            <div class="ml-3">
                                                <p class="text-base text-gray-900">@answer</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>

            <!-- Navigation Buttons -->
            <div class="border-t border-gray-200 p-4 flex justify-between items-center">
                <button @onclick="PreviousQuestion"
                        disabled="@(_currentQuestionIndex == 0)"
                        class="@(_currentQuestionIndex == 0
                                   ? "px-4 py-2 border border-gray-300 rounded-md text-gray-400 bg-gray-50 cursor-not-allowed"
                                   : "px-4 py-2 border border-gray-300 rounded-md text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500")">
                    Previous
                </button>

                <div class="text-sm text-gray-500">
                    @if (_answeredQuestions.ContainsKey(_currentQuestionIndex))
                    {
                        <span class="text-green-600">• Answered</span>
                    }
                    else
                    {
                        <span>• Not answered</span>
                    }
                </div>

                @if (_currentQuestionIndex < _totalQuestions - 1)
                {
                    <button @onclick="NextQuestion"
                            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Next
                    </button>
                }
                else
                {
                    <button @onclick="ShowSubmitConfirmation"
                            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Submit Quiz
                    </button>
                }
            </div>
        </div>

        <!-- Quiz Navigation Panel -->
        <div class="mt-6 bg-white rounded-lg border border-gray-200 shadow-sm overflow-hidden">
            <div class="p-4 border-b border-gray-200">
                <h2 class="font-medium text-gray-900">Question Navigator</h2>
                <p class="text-sm text-gray-500 mt-1">Session ID: @(_quizSession?.Id.ToString() ?? "Loading...")</p>
            </div>
            <div class="p-4">
                <div class="flex flex-wrap gap-2">
                    @for (int i = 0; i < _totalQuestions; i++)
                    {
                        int questionNumber = i;
                        <button @onclick="() => JumpToQuestion(questionNumber)"
                                class="w-10 h-10 flex items-center justify-center rounded-md text-sm font-medium
                                      @(questionNumber == _currentQuestionIndex
                                                                                 ? "bg-blue-600 text-white"
                                                                                 : _answeredQuestions.ContainsKey(questionNumber)
                                                                                     ? "bg-green-100 text-green-800 border border-green-200"
                                                                                     : "bg-gray-100 text-gray-800 hover:bg-gray-200")">
                            @(questionNumber + 1)
                        </button>
                    }
                </div>
            </div>
            <div class="p-4 border-t border-gray-200 bg-gray-50">
                <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-2">
                    <div class="flex items-center gap-4 text-sm">
                        <div class="flex items-center gap-1">
                            <div class="w-3 h-3 rounded-full bg-green-500"></div>
                            <span>Answered</span>
                        </div>
                        <div class="flex items-center gap-1">
                            <div class="w-3 h-3 rounded-full bg-blue-500"></div>
                            <span>Current</span>
                        </div>
                        <div class="flex items-center gap-1">
                            <div class="w-3 h-3 rounded-full bg-gray-300"></div>
                            <span>Unanswered</span>
                        </div>
                    </div>
                    <div class="text-sm text-gray-600">
                        <span>Progress: @_answeredQuestions.Count / @_totalQuestions questions</span>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@if (_showExitConfirmation)
{
    <div class="fixed inset-0 bg-black/80 z-40 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md">
            <div class="p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Exit Quiz</h3>
                <p class="text-gray-600">
                    Are you sure you want to exit the quiz? Your current progress will be saved,
                    but if the quiz has a time limit, the timer will continue to run.
                </p>
                <div class="mt-6 flex justify-end space-x-3">
                    <button @onclick="CancelExit"
                            class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button @onclick="ConfirmExit"
                            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-red-600 hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500">
                        Exit Quiz
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (_showSubmitConfirmation)
{
    <div class="fixed inset-0 bg-black/80 z-40 flex items-center justify-center p-4">
        <div class="bg-white rounded-lg shadow-lg w-full max-w-md">
            <div class="p-6">
                <h3 class="text-lg font-medium text-gray-900 mb-4">Submit Quiz</h3>
                <p class="text-gray-600">
                    Are you sure you want to submit your quiz? You've answered
                    @_answeredQuestions.Count out of @_totalQuestions questions.
                </p>
                @if (_answeredQuestions.Count < _totalQuestions)
                {
                    <div class="mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md">
                        <p class="text-sm text-yellow-800">
                            Warning: You have @(_totalQuestions - _answeredQuestions.Count) unanswered questions.
                            Once submitted, you won't be able to change your answers.
                        </p>
                    </div>
                }
                <div class="mt-6 flex justify-end space-x-3">
                    <button @onclick="CancelSubmit"
                            class="px-4 py-2 border border-gray-300 rounded-md shadow-sm text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                        Cancel
                    </button>
                    <button @onclick="SubmitQuiz"
                            class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500">
                        Submit Quiz
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid QuizId { get; set; }

    private bool _isLoading = true;
    private bool _quizError = false;
    private string _errorMessage = string.Empty;
    private string _quizTitle = "Sample Quiz";
    private int _currentQuestionIndex = 0;
    private int _totalQuestions = 0;
    private int _selectedAnswerIndex = -1;
    private Dictionary<int, int> _answeredQuestions = new Dictionary<int, int>();
    private QuestionWithAnswerDto? _currentQuestion;
    private QuizSessionDto? _quizSession;
    private TimeSpan _timeRemaining = TimeSpan.FromMinutes(30); // Mock value - 30 minutes
    private bool _showExitConfirmation = false;
    private bool _showSubmitConfirmation = false;
    private System.Timers.Timer? _timer;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (UserState?.CurrentUser?.Id is null)
            {
                ToastService.ShowError("User is not logged in.", "Error");
                return;
            }

            var request = new CreateOrGetQuizSessionRequest() { QuizId = QuizId, };
            var response = await QuizSessionService.CreateOrGetQuizSessionAsync(request);

            if (response is null)
            {
                ToastService.ShowError("Failed to create quiz session.", "Error");
                return;
            }

            _quizSession = response.QuizSessionDto;
            _totalQuestions = _quizSession.TotalQuestions;

            var questionRequest = new GetCurrentQuestionRequest
            {
                QuizId = QuizId.ToString(),
                QuestionIndex = _currentQuestionIndex
            };

            var questionResponse = await QuizSessionService.GetCurrentQuestionAsync(questionRequest);
            if (questionResponse is null)
            {
                ToastService.ShowError("Failed to fetch question!", "Error");
                return;
            }

            _totalQuestions = _quizSession.TotalQuestions;
            _currentQuestion = questionResponse.QuestionWithAnswerDto;

            _timeRemaining = TimeSpan.FromMinutes(30); // Mock value

            StartTimer();
            _isLoading = false;
        }
        catch (Exception ex)
        {
            _isLoading = false;
            _quizError = true;
            _errorMessage = ex.Message;
        }
    }

    private void StartTimer()
    {
        _timer = new System.Timers.Timer(1000);
        _timer.Elapsed += TimerElapsed;
        _timer.AutoReset = true;
        _timer.Enabled = true;
    }

    private void TimerElapsed(object? sender, ElapsedEventArgs e)
    {
        _timeRemaining = _timeRemaining.Subtract(TimeSpan.FromSeconds(1));

        if (_timeRemaining.TotalSeconds <= 0)
        {
            _timer?.Stop();
            // Auto-submit the quiz when time runs out
            InvokeAsync(async () => { await SubmitQuiz(); });
        }

        InvokeAsync(StateHasChanged);
    }

    private string FormatTimeRemaining(TimeSpan timeSpan)
    {
        return $"{(int)timeSpan.TotalHours:D2}:{timeSpan.Minutes:D2}:{timeSpan.Seconds:D2}";
    }

    private async Task SelectAnswer(int answerIndex)
    {
        _selectedAnswerIndex = answerIndex;
        _answeredQuestions[_currentQuestionIndex] = answerIndex;

        // In a real implementation, you would save the answer to the backend
        // var request = new SaveAnswerRequest {
        //     QuizSessionId = _quizSession.Id,
        //     QuestionIndex = _currentQuestionIndex,
        //     AnswerIndex = answerIndex
        // };
        // await QuizSessionService.SaveAnswerAsync(request);
    }

    private async Task NextQuestion()
    {
        if (_currentQuestionIndex < _totalQuestions - 1)
        {
            _currentQuestionIndex++;
            await LoadCurrentQuestion();
        }
    }

    private async Task PreviousQuestion()
    {
        if (_currentQuestionIndex > 0)
        {
            _currentQuestionIndex--;
            await LoadCurrentQuestion();
        }
    }

    private async Task JumpToQuestion(int questionIndex)
    {
        if (questionIndex >= 0 && questionIndex < _totalQuestions)
        {
            _currentQuestionIndex = questionIndex;
            await LoadCurrentQuestion();
        }
    }

    private async Task LoadCurrentQuestion()
    {
        var request = new GetCurrentQuestionRequest
        {
            QuizId = QuizId.ToString(),
            QuestionIndex = _currentQuestionIndex
        };
        var response = await QuizSessionService.GetCurrentQuestionAsync(request);

        if (response is null)
        {
            ToastService.ShowError("Failed to fetch question!", "Error");
            return;
        }

        _currentQuestion = response.QuestionWithAnswerDto;
        _selectedAnswerIndex = _answeredQuestions.ContainsKey(_currentQuestionIndex) ? _answeredQuestions[_currentQuestionIndex] : -1;
    }

    private void ShowExitConfirmation()
    {
        _showExitConfirmation = true;
    }

    private void CancelExit()
    {
        _showExitConfirmation = false;
    }

    private async Task ConfirmExit()
    {
        // Save the current progress
        // In a real implementation, you would call your API here to save the current state
        // var request = new SaveQuizProgressRequest {
        //     QuizSessionId = _quizSession.Id,
        //     Answers = _answeredQuestions
        // };
        // await QuizSessionService.SaveQuizProgressAsync(request);

        // Navigate back to dashboard
        NavigateToUserDashboard();
    }

    private void NavigateToUserDashboard()
    {
        // Clean up timer
        _timer?.Stop();
        _timer?.Dispose();

        NavigationManager.NavigateTo("/user/dashboard");
    }

    private void ShowSubmitConfirmation()
    {
        _showSubmitConfirmation = true;
    }

    private void CancelSubmit()
    {
        _showSubmitConfirmation = false;
    }

    private async Task SubmitQuiz()
    {
        // Clean up timer
        _timer?.Stop();
        _timer?.Dispose();

        _isLoading = true;
        await InvokeAsync(StateHasChanged);

        try
        {
            // In a real implementation, you would call your API here to submit all answers
            // var request = new FinalizeQuizSessionRequest {
            //     QuizSessionId = _quizSession.Id,
            //     Answers = _answeredQuestions
            // };
            // var response = await QuizSessionService.FinalizeQuizSessionAsync(request);

            // Update session status
            if (_quizSession != null)
            {
                _quizSession.Status = "Completed";
                _quizSession.FinalizedAt = DateTime.Now;

                // Mock calculation of correct answers
                _quizSession.CorrectAnswers = _answeredQuestions.Count / 2; // Just a mock value
            }

            // For now, simulate API call
            await Task.Delay(1000);

            ToastService.ShowSuccess("Quiz submitted successfully!", "Success");

            // Navigate to results page or dashboard
            NavigationManager.NavigateTo($"/user/results/{_quizSession?.Id}");
        }
        catch (Exception ex)
        {
            _isLoading = false;
            ToastService.ShowError($"Error submitting quiz: {ex.Message}", "Error");
        }
    }

    public void Dispose()
    {
        _timer?.Stop();
        _timer?.Dispose();
    }

}
